// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package productmodel

import (
	"context"
	"database/sql"
)

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, sku, price, available, created_at, version FROM product 
  WHERE id=$1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Sku,
		&i.Price,
		&i.Available,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const insertProduct = `-- name: InsertProduct :one
INSERT INTO product (name, description, price, available)
  VALUES ($1, $2, $3, $4)
  RETURNING id, name, description, sku, price, available, created_at, version
`

type InsertProductParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       float64        `json:"price"`
	Available   sql.NullBool   `json:"available"`
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, insertProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Available,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Sku,
		&i.Price,
		&i.Available,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, name, description, sku, price, available, created_at, version FROM product
`

func (q *Queries) ListProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Sku,
			&i.Price,
			&i.Available,
			&i.CreatedAt,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product
SET name = $1, description = $2, price = $3, available = $4, version = version + 1
  WHERE id = $5 AND version = $6
RETURNING version
`

type UpdateProductParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       float64        `json:"price"`
	Available   sql.NullBool   `json:"available"`
	ID          int64          `json:"id"`
	Version     int32          `json:"version"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Available,
		arg.ID,
		arg.Version,
	)
	var version int32
	err := row.Scan(&version)
	return version, err
}
