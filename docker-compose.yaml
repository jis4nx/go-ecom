services:
  db:
    container_name: postgres
    image: postgres:15.6-alpine3.19
    restart: always
    env_file:
      - dev.env

    hostname: postgres
    networks:
        - gocom
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
  

  rabbit:
    container_name: rabbitmq
    image: rabbitmq:3.13-management
    hostname: rabbit
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
        - gocom
    env_file:
      - dev.env
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 3s
      timeout: 3s
      retries: 10


  product-service:
    container_name: productcont
    restart: on-failure
    hostname: product
    env_file:
      - dev.env
    build:
      args:
        BUILD_TYPE: ${BUILD_TYPE}
      context: .
      dockerfile: product/${BUILD_TYPE}.Dockerfile
    volumes:
      - ./product:/app/product
      - ./helpers:/app/helpers
      - ./config:/app/config
      - ./pkg:/app/pkg
      - ./logs:/app/logs:rw
      - ./dev.env:/app/dev.env
    networks:
      - gocom
    ports:
      - "4001:4001"
    depends_on:
      db:
        condition: service_healthy
      rabbit:
        condition: service_healthy



networks:
  gocom:

volumes:
  postgres_data:
